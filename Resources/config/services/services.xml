<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="paysera_rest.format_detector"
                 class="Paysera\Bundle\RestBundle\Service\FormatDetector">
            <argument type="service" id="logger"/>
        </service>

        <service id="paysera_rest.api_manager" class="Paysera\Bundle\RestBundle\ApiManager">
            <tag name="monolog.logger" channel="paysera_rest.api_manager" />

            <argument type="service" id="paysera_rest.format_detector"/>
            <argument type="service" id="logger"/>
            <argument type="service" id="validator"/>
            <argument type="service" id="paysera_rest.normalizer.error"/>

            <call method="setErrorConfig">
                <argument type="service" id="paysera_rest.error_config"/>
            </call>
        </service>

        <service id="paysera_rest.error_config" class="Paysera\Bundle\RestBundle\Entity\ErrorConfig">
            <call method="configure">
                <argument>invalid_request</argument>
                <argument>400</argument>
                <argument>Request content is invalid</argument>
            </call>
            <call method="configure">
                <argument>invalid_parameters</argument>
                <argument>400</argument>
                <argument>Some required parameter is missing or it's format is invalid</argument>
            </call>
            <call method="configure">
                <argument>invalid_state</argument>
                <argument>409</argument>
                <argument>Requested action cannot be made to the current state of resource</argument>
            </call>
            <call method="configure">
                <argument>unauthorized</argument>
                <argument>401</argument>
                <argument>You have not provided any credentials or they are invalid</argument>
            </call>
            <call method="configure">
                <argument>forbidden</argument>
                <argument>403</argument>
                <argument>You have no rights to access requested resource or make requested action</argument>
            </call>
            <call method="configure">
                <argument>not_found</argument>
                <argument>404</argument>
                <argument>Resource was not found</argument>
            </call>
            <call method="configure">
                <argument>internal_server_error</argument>
                <argument>500</argument>
                <argument>Unexpected internal system error</argument>
            </call>
            <call method="configure">
                <argument>not_acceptable</argument>
                <argument>406</argument>
                <argument>Unknown request or response format</argument>
            </call>
        </service>

        <service id="paysera_rest.service.request_logger" class="Paysera\Bundle\RestBundle\Service\RequestLogger">
            <tag name="monolog.logger" channel="paysera_rest.rest_logger" />

            <argument type="service" id="logger" />
        </service>

        <service id="paysera_rest.service.exception_logger" class="Paysera\Bundle\RestBundle\Service\ExceptionLogger" />

        <service id="paysera_rest.rest_listener" class="Paysera\Bundle\RestBundle\Listener\RestListener">
            <tag name="monolog.logger" channel="paysera_rest.rest_listener" />
            <tag name="kernel.event_listener" event="kernel.exception" method="onKernelException" />
            <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="20" />
            <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController" priority="1" />
            <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" />

            <argument type="service" id="paysera_rest.api_manager" />
            <argument type="service" id="paysera_rest.serializer.context_aware_normalizer_factory" />
            <argument type="service" id="logger" />
            <argument type="service" id="paysera_rest.service.parameter_to_entity_map_builder"/>
            <argument type="service" id="paysera_rest.service.request_logger"/>
            <argument type="service" id="paysera_rest.service.exception_logger"/>
        </service>

        <!-- Encoding -->
        <service id="paysera_rest.factory.encoder" class="Paysera\Component\Serializer\Factory\EncoderFactory"/>
        <service id="paysera_rest.encoding.json" class="Paysera\Component\Serializer\Encoding\Json">
            <tag name="paysera_rest.encoder" format="json" />
            <tag name="paysera_rest.decoder" format="json" />
        </service>
        <service id="paysera_rest.encoding.png" class="Paysera\Component\Serializer\Encoding\Plain">
            <factory service="paysera_rest.factory.encoder" method="createPngEncoder"/>
            <tag name="paysera_rest.encoder" format="png"/>
            <tag name="paysera_rest.decoder" format="png"/>
        </service>
        <service id="paysera_rest.encoding.gif" class="Paysera\Component\Serializer\Encoding\Plain">
            <factory service="paysera_rest.factory.encoder" method="createPngEncoder"/>
            <tag name="paysera_rest.encoder" format="gif"/>
            <tag name="paysera_rest.decoder" format="gif"/>
        </service>
        <service id="paysera_rest.encoding.jpeg" class="Paysera\Component\Serializer\Encoding\Plain">
            <factory service="paysera_rest.factory.encoder" method="createJpegEncoder"/>
            <tag name="paysera_rest.encoder" format="jpg"/>
            <tag name="paysera_rest.decoder" format="jpg"/>
        </service>
        <service id="paysera_rest.encoding.plain_text" class="Paysera\Component\Serializer\Encoding\Plain">
            <factory service="paysera_rest.factory.encoder" method="createPlainTextEncoder"/>
            <tag name="paysera_rest.encoder" format="txt"/>
            <tag name="paysera_rest.decoder" format="txt"/>
        </service>

        <service id="paysera_rest.encoding.jsonp_factory"
                 class="Paysera\Component\Serializer\Factory\JsonpEncoderFactory">
            <argument type="service" id="paysera_rest.encoding.json"/>
            <argument type="service">
                <service class="JsonpCallbackValidator"/>
            </argument>
        </service>

        <service id="paysera_rest.result_provider" abstract="true"
                 class="Paysera\Bundle\RestBundle\Repository\ResultProvider" />

        <service id="paysera_rest.default_cache_strategy"
                 class="Paysera\Bundle\RestBundle\Cache\DefaultCacheStrategy" />

        <service id="paysera_rest.modification_date_provider.collection" abstract="true"
                 class="Paysera\Bundle\RestBundle\ModificationDateProvider\CollectionDateProvider" />


        <service id="paysera_rest.serializer.fields_parser" public="false"
                 class="Paysera\Component\Serializer\Filter\FieldsParser"/>
        <service id="paysera_rest.serializer.fields_filter" public="false"
                 class="Paysera\Component\Serializer\Filter\FieldsFilter">
            <argument type="service" id="paysera_rest.serializer.fields_parser"/>
        </service>
        <service id="paysera_rest.serializer.context_aware_normalizer_factory"
                 class="Paysera\Component\Serializer\Factory\ContextAwareNormalizerFactory">
            <argument type="service" id="paysera_rest.serializer.fields_parser"/>
            <argument type="service" id="paysera_rest.serializer.fields_filter"/>
        </service>
        <service id="paysera_rest.serializer.distributed_normalizer" abstract="true"
                 class="Paysera\Component\Serializer\Normalizer\DistributedNormalizer">
            <factory service="paysera_rest.serializer.context_aware_normalizer_factory" method="create"/>
        </service>

        <service id="paysera_rest.serializer.validation.properties_aware_validator"
                 class="Paysera\Component\Serializer\Validation\PropertiesAwareValidator">
            <argument type="service" id="validator"/>
        </service>

        <service id="paysera_rest.service.parameter_to_entity_map_builder"
                 class="Paysera\Bundle\RestBundle\Service\ParameterToEntityMapBuilder">
            <argument type="service" id="logger"/>
            <argument type="service" id="paysera_rest.api_manager"/>
        </service>

        <service id="paysera_rest.service.property_path_converter.no_op_converter"
                 class="Paysera\Component\Serializer\Converter\NoOpConverter" />

        <service id="paysera_rest.service.property_path_converter.camel_case_to_snake_case"
                 class="Paysera\Component\Serializer\Converter\CamelCaseToSnakeCaseConverter" />

        <service id="paysera_rest.security_strategy.role_and_ip" abstract="true"
                 class="Paysera\Bundle\RestBundle\Security\RoleAndIpStrategy">
            <argument type="service" id="security.role_hierarchy"/>
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="logger" />
        </service>
    </services>
</container>
